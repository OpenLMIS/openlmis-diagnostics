buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.2.2.RELEASE"
    }
}

plugins {
    id "org.sonarqube" version "3.3"
    id "com.moowork.node" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = serviceGroup
version = serviceVersion
archivesBaseName = rootProject.name
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile 'org.projectlombok:lombok:1.18.22'
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-rest"
    compile "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.2.2.RELEASE"
    compile 'com.google.guava:guava:23.3-jre'
    compile 'org.apache.commons:commons-lang3'
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'org.springframework:spring-aspects'
    compile "com.ecwid.consul:consul-api:1.3.0"
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompile "com.github.tomakehurst:wiremock:1.58"
    testCompile "com.jayway.restassured:rest-assured:2.7.0"
    testCompile "guru.nidi.raml:raml-tester:0.8.15"
    testCompile "org.raml:raml-parser:0.8.37"
    testCompile "junit:junit"
    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'io.rest-assured:json-schema-validator'
    testCompile 'io.rest-assured:rest-assured'
    testCompile 'io.rest-assured:spring-mock-mvc'
    testCompile 'nl.jqno.equalsverifier:equalsverifier:2.4'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    /*    iml.withXml { xmlFile ->
            xmlFile.asNode().component.find { it.@name == 'NewModuleRootManager'}['Content'][0]
                .addNode {
                sourceFolder {
                    profile(url: "file://$MODULE_DIR\$/src/integration-test/java", isTestSource:
                            true)
                }
            }
        }*/
    }
    module {
        sourceDirs -= file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/java')
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter test
    environment 'BASE_URL', "http://localhost"

    exclude '**/migration/**'
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
}

task checkApiIsRaml(type:Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    additionalSourceDirs(files(sourceSets.main.allJava.srcDirs))
}

checkstyle {
    toolVersion = "8.12"
}

//NOTE: This plugin requires that this task be named 'sonarqube'. In fact, it is performing SonarCloud analysis.
sonarqube {
    properties {
        property "sonar.projectKey", "OpenLMIS_openlmis-diagnostics"
        property "sonar.organization", "openlmis"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.source", "17"
        property "sonar.coverage.jacoco.xmlReportPaths", "./report.xml"
    }
}

pmd {
    toolVersion = '5.4.0'
    consoleOutput= true
    ignoreFailures = false
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}


test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

apply from: "documentation.gradle"
integrationTest {
    dependsOn ramlToHtml
}

processResources {
    // we want the generated HTML spec file included in the output jar
    finalizedBy ramlToHtml
    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

apply from: "registration.gradle"

assemble {
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn copyConsulRegistrationToBuild
    dependsOn jacocoTestReport
}

check {
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn integrationTest
    dependsOn copyConsulRegistrationToBuild
}

build {
    dependsOn jacocoTestReport
    dependsOn check
}
