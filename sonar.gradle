//Usage: gradle sonarqube
sonarqube {
    properties {
        property "sonar.projectName", "OpenLMIS Health & Information Service"
        property "sonar.projectKey", "org.sonarqube:$rootProject.name"
        property "sonar.projectVersion", version
        property "sonar.host.url", "http://sonar.openlmis.org"
        property "sonar.java.coveragePlugin", "jacoco"
        //Tells SonarQube where the unit tests execution reports are
        property "sonar.junit.reportsPath", "build/test-results/test"
        //Tells SonarQube where the unit tests code coverage report is
        property "sonar.jacoco.reportPath", "build/jacoco/test.exec"
        //Tells SonarQube where the integration tests code coverage report is
        property "sonar.jacoco.itReportPath", "build/jacoco/integrationTest.exec"
        properties["sonar.tests"] += sourceSets.integrationTest.java
    }
}

def retrieveQualityGate(fileName) {
    def url = "http://sonar.openlmis.org" \
        + "/api/qualitygates/project_status?projectKey=" \
        + "org.sonarqube:$rootProject.name"

    def response = new URL(url).text

    def dir = new File("build/sonar-qg/")
    dir.mkdirs()

    def file = new File(dir, fileName + ".json")
    file.text = response
}

task getQualityGate << {
    retrieveQualityGate('qg-before')
}

task checkQualityGate << {
    def parser = new groovy.json.JsonSlurper()
    def before = parser.parse(file('build/sonar/qg-before.json'))
    def after

    for (def i = 0; i < 50; ++i) {
        retrieveQualityGate('qg-after')
        after = parser.parse(file('build/sonar/qg-after.json'))

        if (before.projectStatus.periods.date == after.projectStatus.periods.date) {
            println "Waiting for sonar results (" + (i + 1) + "/50)"
            sleep 1000
        } else {
            break
        }
    }

    if (after.projectStatus.status == "ERROR") {
        throw new GradleException("Quality Gate FAILED")
    }

    println "Quality Gate PASSED"
}

project.tasks["sonarqube"].dependsOn integrationTest
project.tasks["checkQualityGate"].dependsOn "sonarqube"